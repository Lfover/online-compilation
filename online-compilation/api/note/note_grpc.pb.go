// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: note/note.proto

package note

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Note_CreateNote_FullMethodName   = "/api.note.Note/CreateNote"
	Note_UpdateNote_FullMethodName   = "/api.note.Note/UpdateNote"
	Note_DeleteNote_FullMethodName   = "/api.note.Note/DeleteNote"
	Note_GetNote_FullMethodName      = "/api.note.Note/GetNote"
	Note_ListNote_FullMethodName     = "/api.note.Note/ListNote"
	Note_CodeInfo_FullMethodName     = "/api.note.Note/CodeInfo"
	Note_NoteDownload_FullMethodName = "/api.note.Note/NoteDownload"
	Note_CodeCompile_FullMethodName  = "/api.note.Note/CodeCompile"
)

// NoteClient is the client API for Note service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteClient interface {
	// 创建笔记
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteReply, error)
	// 更新笔记
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteReply, error)
	// 删除笔记
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteReply, error)
	// 获取笔记详情
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*GetNoteReply, error)
	// 获取笔记列表
	ListNote(ctx context.Context, in *ListNoteRequest, opts ...grpc.CallOption) (*ListNoteReply, error)
	// 获取代码详情
	CodeInfo(ctx context.Context, in *CodeInfoRequest, opts ...grpc.CallOption) (*CodeInfoReply, error)
	// 下载笔记
	NoteDownload(ctx context.Context, in *NoteDownloadRequest, opts ...grpc.CallOption) (*NoteDownloadReply, error)
	// 编译代码
	CodeCompile(ctx context.Context, in *CodeCompileRequest, opts ...grpc.CallOption) (*CodeCompileReply, error)
}

type noteClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteClient(cc grpc.ClientConnInterface) NoteClient {
	return &noteClient{cc}
}

func (c *noteClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteReply, error) {
	out := new(CreateNoteReply)
	err := c.cc.Invoke(ctx, Note_CreateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*UpdateNoteReply, error) {
	out := new(UpdateNoteReply)
	err := c.cc.Invoke(ctx, Note_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteReply, error) {
	out := new(DeleteNoteReply)
	err := c.cc.Invoke(ctx, Note_DeleteNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*GetNoteReply, error) {
	out := new(GetNoteReply)
	err := c.cc.Invoke(ctx, Note_GetNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) ListNote(ctx context.Context, in *ListNoteRequest, opts ...grpc.CallOption) (*ListNoteReply, error) {
	out := new(ListNoteReply)
	err := c.cc.Invoke(ctx, Note_ListNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) CodeInfo(ctx context.Context, in *CodeInfoRequest, opts ...grpc.CallOption) (*CodeInfoReply, error) {
	out := new(CodeInfoReply)
	err := c.cc.Invoke(ctx, Note_CodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) NoteDownload(ctx context.Context, in *NoteDownloadRequest, opts ...grpc.CallOption) (*NoteDownloadReply, error) {
	out := new(NoteDownloadReply)
	err := c.cc.Invoke(ctx, Note_NoteDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteClient) CodeCompile(ctx context.Context, in *CodeCompileRequest, opts ...grpc.CallOption) (*CodeCompileReply, error) {
	out := new(CodeCompileReply)
	err := c.cc.Invoke(ctx, Note_CodeCompile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteServer is the server API for Note service.
// All implementations must embed UnimplementedNoteServer
// for forward compatibility
type NoteServer interface {
	// 创建笔记
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteReply, error)
	// 更新笔记
	UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteReply, error)
	// 删除笔记
	DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteReply, error)
	// 获取笔记详情
	GetNote(context.Context, *GetNoteRequest) (*GetNoteReply, error)
	// 获取笔记列表
	ListNote(context.Context, *ListNoteRequest) (*ListNoteReply, error)
	// 获取代码详情
	CodeInfo(context.Context, *CodeInfoRequest) (*CodeInfoReply, error)
	// 下载笔记
	NoteDownload(context.Context, *NoteDownloadRequest) (*NoteDownloadReply, error)
	// 编译代码
	CodeCompile(context.Context, *CodeCompileRequest) (*CodeCompileReply, error)
	mustEmbedUnimplementedNoteServer()
}

// UnimplementedNoteServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServer struct {
}

func (UnimplementedNoteServer) CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedNoteServer) UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteServer) DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNoteServer) GetNote(context.Context, *GetNoteRequest) (*GetNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedNoteServer) ListNote(context.Context, *ListNoteRequest) (*ListNoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNote not implemented")
}
func (UnimplementedNoteServer) CodeInfo(context.Context, *CodeInfoRequest) (*CodeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeInfo not implemented")
}
func (UnimplementedNoteServer) NoteDownload(context.Context, *NoteDownloadRequest) (*NoteDownloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteDownload not implemented")
}
func (UnimplementedNoteServer) CodeCompile(context.Context, *CodeCompileRequest) (*CodeCompileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeCompile not implemented")
}
func (UnimplementedNoteServer) mustEmbedUnimplementedNoteServer() {}

// UnsafeNoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServer will
// result in compilation errors.
type UnsafeNoteServer interface {
	mustEmbedUnimplementedNoteServer()
}

func RegisterNoteServer(s grpc.ServiceRegistrar, srv NoteServer) {
	s.RegisterService(&Note_ServiceDesc, srv)
}

func _Note_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_CreateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_GetNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_ListNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).ListNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_ListNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).ListNote(ctx, req.(*ListNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_CodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).CodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_CodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).CodeInfo(ctx, req.(*CodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_NoteDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).NoteDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_NoteDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).NoteDownload(ctx, req.(*NoteDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Note_CodeCompile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeCompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteServer).CodeCompile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Note_CodeCompile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteServer).CodeCompile(ctx, req.(*CodeCompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Note_ServiceDesc is the grpc.ServiceDesc for Note service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Note_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.note.Note",
	HandlerType: (*NoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNote",
			Handler:    _Note_CreateNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _Note_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _Note_DeleteNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _Note_GetNote_Handler,
		},
		{
			MethodName: "ListNote",
			Handler:    _Note_ListNote_Handler,
		},
		{
			MethodName: "CodeInfo",
			Handler:    _Note_CodeInfo_Handler,
		},
		{
			MethodName: "NoteDownload",
			Handler:    _Note_NoteDownload_Handler,
		},
		{
			MethodName: "CodeCompile",
			Handler:    _Note_CodeCompile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note/note.proto",
}
