// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: note/note.proto

package note

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNoteCodeCompile = "/api.note.Note/CodeCompile"
const OperationNoteCodeInfo = "/api.note.Note/CodeInfo"
const OperationNoteCreateNote = "/api.note.Note/CreateNote"
const OperationNoteDeleteNote = "/api.note.Note/DeleteNote"
const OperationNoteGetNote = "/api.note.Note/GetNote"
const OperationNoteListNote = "/api.note.Note/ListNote"
const OperationNoteNoteDownload = "/api.note.Note/NoteDownload"
const OperationNoteUpdateNote = "/api.note.Note/UpdateNote"

type NoteHTTPServer interface {
	// CodeCompile编译代码
	CodeCompile(context.Context, *CodeCompileRequest) (*CodeCompileReply, error)
	// CodeInfo获取代码详情
	CodeInfo(context.Context, *CodeInfoRequest) (*CodeInfoReply, error)
	// CreateNote创建笔记
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteReply, error)
	// DeleteNote删除笔记
	DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteReply, error)
	// GetNote获取笔记详情
	GetNote(context.Context, *GetNoteRequest) (*GetNoteReply, error)
	// ListNote获取笔记列表
	ListNote(context.Context, *ListNoteRequest) (*ListNoteReply, error)
	// NoteDownload下载笔记
	NoteDownload(context.Context, *NoteDownloadRequest) (*NoteDownloadReply, error)
	// UpdateNote更新笔记
	UpdateNote(context.Context, *UpdateNoteRequest) (*UpdateNoteReply, error)
}

func RegisterNoteHTTPServer(s *http.Server, srv NoteHTTPServer) {
	r := s.Route("/")
	r.POST("/api/note/create", _Note_CreateNote0_HTTP_Handler(srv))
	r.POST("/api/note/update", _Note_UpdateNote0_HTTP_Handler(srv))
	r.POST("/api/note/delete", _Note_DeleteNote0_HTTP_Handler(srv))
	r.GET("/api/note/get/note", _Note_GetNote0_HTTP_Handler(srv))
	r.GET("/api/note/note/list", _Note_ListNote0_HTTP_Handler(srv))
	r.GET("/api/code/info", _Note_CodeInfo0_HTTP_Handler(srv))
	r.GET("/v1/note/download", _Note_NoteDownload0_HTTP_Handler(srv))
	r.GET("/v1/code/compile", _Note_CodeCompile0_HTTP_Handler(srv))
}

func _Note_CreateNote0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNoteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteCreateNote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNote(ctx, req.(*CreateNoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNoteReply)
		return ctx.Result(200, reply)
	}
}

func _Note_UpdateNote0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNoteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteUpdateNote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNote(ctx, req.(*UpdateNoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNoteReply)
		return ctx.Result(200, reply)
	}
}

func _Note_DeleteNote0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNoteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteDeleteNote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNote(ctx, req.(*DeleteNoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNoteReply)
		return ctx.Result(200, reply)
	}
}

func _Note_GetNote0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteGetNote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNote(ctx, req.(*GetNoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoteReply)
		return ctx.Result(200, reply)
	}
}

func _Note_ListNote0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNoteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteListNote)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNote(ctx, req.(*ListNoteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNoteReply)
		return ctx.Result(200, reply)
	}
}

func _Note_CodeInfo0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CodeInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteCodeInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CodeInfo(ctx, req.(*CodeInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CodeInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Note_NoteDownload0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NoteDownloadRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteNoteDownload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NoteDownload(ctx, req.(*NoteDownloadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NoteDownloadReply)
		return ctx.Result(200, reply)
	}
}

func _Note_CodeCompile0_HTTP_Handler(srv NoteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CodeCompileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoteCodeCompile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CodeCompile(ctx, req.(*CodeCompileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CodeCompileReply)
		return ctx.Result(200, reply)
	}
}

type NoteHTTPClient interface {
	CodeCompile(ctx context.Context, req *CodeCompileRequest, opts ...http.CallOption) (rsp *CodeCompileReply, err error)
	CodeInfo(ctx context.Context, req *CodeInfoRequest, opts ...http.CallOption) (rsp *CodeInfoReply, err error)
	CreateNote(ctx context.Context, req *CreateNoteRequest, opts ...http.CallOption) (rsp *CreateNoteReply, err error)
	DeleteNote(ctx context.Context, req *DeleteNoteRequest, opts ...http.CallOption) (rsp *DeleteNoteReply, err error)
	GetNote(ctx context.Context, req *GetNoteRequest, opts ...http.CallOption) (rsp *GetNoteReply, err error)
	ListNote(ctx context.Context, req *ListNoteRequest, opts ...http.CallOption) (rsp *ListNoteReply, err error)
	NoteDownload(ctx context.Context, req *NoteDownloadRequest, opts ...http.CallOption) (rsp *NoteDownloadReply, err error)
	UpdateNote(ctx context.Context, req *UpdateNoteRequest, opts ...http.CallOption) (rsp *UpdateNoteReply, err error)
}

type NoteHTTPClientImpl struct {
	cc *http.Client
}

func NewNoteHTTPClient(client *http.Client) NoteHTTPClient {
	return &NoteHTTPClientImpl{client}
}

func (c *NoteHTTPClientImpl) CodeCompile(ctx context.Context, in *CodeCompileRequest, opts ...http.CallOption) (*CodeCompileReply, error) {
	var out CodeCompileReply
	pattern := "/v1/code/compile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoteCodeCompile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) CodeInfo(ctx context.Context, in *CodeInfoRequest, opts ...http.CallOption) (*CodeInfoReply, error) {
	var out CodeInfoReply
	pattern := "/api/code/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoteCodeInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...http.CallOption) (*CreateNoteReply, error) {
	var out CreateNoteReply
	pattern := "/api/note/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoteCreateNote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...http.CallOption) (*DeleteNoteReply, error) {
	var out DeleteNoteReply
	pattern := "/api/note/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoteDeleteNote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) GetNote(ctx context.Context, in *GetNoteRequest, opts ...http.CallOption) (*GetNoteReply, error) {
	var out GetNoteReply
	pattern := "/api/note/get/note"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoteGetNote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) ListNote(ctx context.Context, in *ListNoteRequest, opts ...http.CallOption) (*ListNoteReply, error) {
	var out ListNoteReply
	pattern := "/api/note/note/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoteListNote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) NoteDownload(ctx context.Context, in *NoteDownloadRequest, opts ...http.CallOption) (*NoteDownloadReply, error) {
	var out NoteDownloadReply
	pattern := "/v1/note/download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoteNoteDownload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoteHTTPClientImpl) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...http.CallOption) (*UpdateNoteReply, error) {
	var out UpdateNoteReply
	pattern := "/api/note/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoteUpdateNote))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
